import tkinter as tk
from tkinter import messagebox, ttk, simpledialog
import json  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "ryes_data.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as file:
            data = json.load(file)
            if not data.get("users"):
                data["users"] = {
                    "admin": {"password": "admin123", "role": "admin"},
                    "user": {"password": "user123", "role": "user"}
                }
            return data
    except FileNotFoundError:
        return {
            "users": {
                "admin": {"password": "admin123", "role": "admin"},
                "user": {"password": "user123", "role": "user"}
            },
            "orders": [],
            "products": [
                {"id": 1, "name": "–§—É—Ç–±–æ–ª–∫–∞", "price": 500, "stock": 10, "rating": 4.5},
                {"id": 2, "name": "–î–∂–∏–Ω—Å—ã", "price": 2000, "stock": 5, "rating": 4.7},
                {"id": 3, "name": "–ö—É—Ä—Ç–∫–∞", "price": 5000, "stock": 2, "rating": 4.8},
                {"id": 4, "name": "–®–∞–ø–∫–∞", "price": 800, "stock": 8, "rating": 4.6},
                {"id": 5, "name": "–ü–µ—Ä—á–∞—Ç–∫–∏", "price": 300, "stock": 15, "rating": 4.4},
                {"id": 6, "name": "–ë—Ä—é–∫–∏", "price": 1500, "stock": 10, "rating": 4.3},
                {"id": 7, "name": "–†—É–±–∞—à–∫–∞", "price": 1200, "stock": 20, "rating": 4.5},
                {"id": 8, "name": "–ö—Ä–æ—Å—Å–æ–≤–∫–∏", "price": 3000, "stock": 7, "rating": 4.7},
                {"id": 9, "name": "–ù–æ—Å–∫–∏", "price": 100, "stock": 50, "rating": 4.2},
                {"id": 10, "name": "–ü—É—Ö–æ–≤–∏–∫", "price": 8000, "stock": 3, "rating": 4.9},
            ]
        }

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, ensure_ascii=False, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
data = load_data()
users_db = data["users"]
orders_db = data["orders"]
products_db = data["products"]

# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class RyesApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Ryes - –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã")
        self.root.state('zoomed')  # –û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –≤–æ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
        self.root.configure(bg="#1e1e1e")

        self.current_user = None
        self.cart = []  # –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        self.create_login_screen()

    def create_login_screen(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        login_frame = tk.Frame(self.root, bg="#2d2d2d", padx=20, pady=20)
        login_frame.place(relx=0.5, rely=0.5, anchor="center")

        tk.Label(login_frame, text="Ryes - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", font=("Arial", 18), bg="#2d2d2d", fg="#ffffff").grid(row=0, column=0, columnspan=2, pady=10)

        tk.Label(login_frame, text="–õ–æ–≥–∏–Ω:", font=("Arial", 12), bg="#2d2d2d", fg="#ffffff").grid(row=1, column=0, pady=5, sticky="w")
        self.login_entry = tk.Entry(login_frame, font=("Arial", 12), bg="#4d4d4d", fg="#ffffff", insertbackground="#ffffff")
        self.login_entry.grid(row=1, column=1, pady=5)

        tk.Label(login_frame, text="–ü–∞—Ä–æ–ª—å:", font=("Arial", 12), bg="#2d2d2d", fg="#ffffff").grid(row=2, column=0, pady=5, sticky="w")
        self.password_entry = tk.Entry(login_frame, font=("Arial", 12), show="*", bg="#4d4d4d", fg="#ffffff", insertbackground="#ffffff")
        self.password_entry.grid(row=2, column=1, pady=5)

        tk.Button(login_frame, text="–í–æ–π—Ç–∏", font=("Arial", 12), bg="#4caf50", fg="#ffffff", command=self.login).grid(row=3, column=0, columnspan=2, pady=10)
        tk.Button(login_frame, text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", font=("Arial", 12), bg="#2196f3", fg="#ffffff", command=self.create_registration_screen).grid(row=4, column=0, columnspan=2)

    def create_registration_screen(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        register_frame = tk.Frame(self.root, bg="#2d2d2d", padx=20, pady=20)
        register_frame.place(relx=0.5, rely=0.5, anchor="center")

        tk.Label(register_frame, text="Ryes - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", font=("Arial", 18), bg="#2d2d2d", fg="#ffffff").grid(row=0, column=0, columnspan=2, pady=10)

        tk.Label(register_frame, text="–õ–æ–≥–∏–Ω:", font=("Arial", 12), bg="#2d2d2d", fg="#ffffff").grid(row=1, column=0, pady=5, sticky="w")
        self.reg_login_entry = tk.Entry(register_frame, font=("Arial", 12), bg="#4d4d4d", fg="#ffffff", insertbackground="#ffffff")
        self.reg_login_entry.grid(row=1, column=1, pady=5)

        tk.Label(register_frame, text="–ü–∞—Ä–æ–ª—å:", font=("Arial", 12), bg="#2d2d2d", fg="#ffffff").grid(row=2, column=0, pady=5, sticky="w")
        self.reg_password_entry = tk.Entry(register_frame, font=("Arial", 12), show="*", bg="#4d4d4d", fg="#ffffff", insertbackground="#ffffff")
        self.reg_password_entry.grid(row=2, column=1, pady=5)

        tk.Button(register_frame, text="–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", font=("Arial", 12), bg="#4caf50", fg="#ffffff", command=self.register).grid(row=3, column=0, columnspan=2, pady=10)
        tk.Button(register_frame, text="–ù–∞–∑–∞–¥", font=("Arial", 12), bg="#ff5722", fg="#ffffff", command=self.create_login_screen).grid(row=4, column=0, columnspan=2)

    def login(self):
        login = self.login_entry.get()
        password = self.password_entry.get()

        if login in users_db and users_db[login]["password"] == password:
            self.current_user = login
            role = users_db[login]["role"]
            if role == "admin":
                self.create_admin_dashboard()
            else:
                self.create_user_dashboard()
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

    def register(self):
        login = self.reg_login_entry.get()
        password = self.reg_password_entry.get()

        if login in users_db:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        elif not login or not password:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        else:
            users_db[login] = {"password": password, "role": "user"}
            save_data({"users": users_db, "orders": orders_db, "products": products_db})
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            self.create_login_screen()

    def create_admin_dashboard(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        header_frame = tk.Frame(self.root, bg="#1e1e1e", padx=20, pady=10)
        header_frame.pack(fill="x")

        user_label = tk.Label(header_frame, text=f"–ê–¥–º–∏–Ω: {self.current_user}", font=("Arial", 12), bg="#1e1e1e", fg="#ffffff")
        user_label.pack(side="right", padx=10)
        user_label.bind("<Button-1>", lambda event: self.toggle_admin_menu(user_label))

        avatar_label = tk.Label(header_frame, text="üë§", font=("Arial", 14), bg="#1e1e1e", fg="#ffffff")
        avatar_label.pack(side="right")
        avatar_label.bind("<Button-1>", lambda event: self.toggle_admin_menu(user_label))

        cart_button = tk.Label(header_frame, text="üõí", font=("Arial", 14), bg="#4caf50", fg="#ffffff")
        cart_button.pack(side="left", padx=10)
        cart_button.bind("<Button-1>", lambda event: self.toggle_cart(cart_button))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞

        self.admin_menu_visible = False
        self.admin_menu_frame = None

        admin_frame = tk.Frame(self.root, bg="#2d2d2d", padx=20, pady=20)
        admin_frame.pack(fill="both", expand=True)

        tk.Label(admin_frame, text="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", font=("Arial", 18), bg="#2d2d2d", fg="#ffffff").pack(pady=10)

        tk.Button(admin_frame, text="–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã", font=("Arial", 12), bg="#2196f3", fg="#ffffff", command=self.show_admin_orders).pack(pady=10)
        tk.Button(admin_frame, text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", font=("Arial", 12), bg="#2196f3", fg="#ffffff", command=self.show_add_product).pack(pady=10)
        tk.Button(admin_frame, text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–≤–∞—Ä—ã", font=("Arial", 12), bg="#2196f3", fg="#ffffff", command=self.show_products).pack(pady=10)

    def toggle_admin_menu(self, label):
        if self.admin_menu_visible:
            self.admin_menu_frame.destroy()
            self.admin_menu_visible = False
        else:
            x, y = label.winfo_rootx() - 100, label.winfo_rooty() + label.winfo_height()  # –£–º–µ–Ω—å—à–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ –≤–ª–µ–≤–æ
            self.admin_menu_frame = tk.Frame(self.root, bg="#3d3d3d", padx=10, pady=5)
            self.admin_menu_frame.place(x=x, y=y, anchor="nw")

            tk.Button(self.admin_menu_frame, text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø–∞–Ω–µ–ª—å", font=("Arial", 12), bg="#2196f3", fg="#ffffff", command=self.create_admin_dashboard).pack(fill="x", pady=5)
            tk.Button(self.admin_menu_frame, text="–í—ã—Ö–æ–¥", font=("Arial", 12), bg="#ff5722", fg="#ffffff", command=self.logout).pack(fill="x", pady=5)
            self.admin_menu_visible = True

    def show_admin_orders(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        header_frame = tk.Frame(self.root, bg="#1e1e1e", padx=20, pady=10)
        header_frame.pack(fill="x")

        user_label = tk.Label(header_frame, text=f"–ê–¥–º–∏–Ω: {self.current_user}", font=("Arial", 12), bg="#1e1e1e", fg="#ffffff")
        user_label.pack(side="right", padx=10)
        user_label.bind("<Button-1>", lambda event: self.toggle_admin_menu(user_label))

        avatar_label = tk.Label(header_frame, text="üë§", font=("Arial", 14), bg="#1e1e1e", fg="#ffffff")
        avatar_label.pack(side="right")
        avatar_label.bind("<Button-1>", lambda event: self.toggle_admin_menu(user_label))

        self.admin_menu_visible = False
        self.admin_menu_frame = None

        admin_orders_frame = tk.Frame(self.root, bg="#2d2d2d", padx=20, pady=20)
        admin_orders_frame.pack(fill="both", expand=True)

        tk.Label(admin_orders_frame, text="–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", font=("Arial", 18), bg="#2d2d2d", fg="#ffffff").pack(pady=10)

        columns = ("ID", "–¢–æ–≤–∞—Ä", "–°—É–º–º–∞", "–ê–¥—Ä–µ—Å", "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä")
        orders_table = ttk.Treeview(admin_orders_frame, columns=columns, show="headings", height=10)
        orders_table.pack(fill="both", expand=True)

        for col in columns:
            orders_table.heading(col, text=col)

        for order in orders_db:
            orders_table.insert("", "end", values=(order["id"], ", ".join(order["items"]), order["total_price"], order["address"], order["track_number"]))

        tk.Button(admin_orders_frame, text="–ù–∞–∑–∞–¥", font=("Arial", 12), bg="#ff5722", fg="#ffffff", command=self.create_admin_dashboard).pack(pady=10)

    def show_add_product(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        header_frame = tk.Frame(self.root, bg="#1e1e1e", padx=20, pady=10)
        header_frame.pack(fill="x")

        user_label = tk.Label(header_frame, text=f"–ê–¥–º–∏–Ω: {self.current_user}", font=("Arial", 12), bg="#1e1e1e", fg="#ffffff")
        user_label.pack(side="right", padx=10)
        user_label.bind("<Button-1>", lambda event: self.toggle_admin_menu(user_label))

        avatar_label = tk.Label(header_frame, text="üë§", font=("Arial", 14), bg="#1e1e1e", fg="#ffffff")
        avatar_label.pack(side="right")
        avatar_label.bind("<Button-1>", lambda event: self.toggle_admin_menu(user_label))

        self.admin_menu_visible = False
        self.admin_menu_frame = None

        add_product_frame = tk.Frame(self.root, bg="#2d2d2d", padx=20, pady=20)
        add_product_frame.pack(fill="both", expand=True)

        tk.Label(add_product_frame, text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", font=("Arial", 18), bg="#2d2d2d", fg="#ffffff").pack(pady=10)

        tk.Label(add_product_frame, text="–ù–∞–∑–≤–∞–Ω–∏–µ:", font=("Arial", 12), bg="#2d2d2d", fg="#ffffff").pack(anchor="w", pady=5)
        self.product_name_entry = tk.Entry(add_product_frame, font=("Arial", 12), bg="#4d4d4d", fg="#ffffff", insertbackground="#ffffff")
        self.product_name_entry.pack(fill="x", pady=5)

        tk.Label(add_product_frame, text="–¶–µ–Ω–∞:", font=("Arial", 12), bg="#2d2d2d", fg="#ffffff").pack(anchor="w", pady=5)
        self.product_price_entry = tk.Entry(add_product_frame, font=("Arial", 12), bg="#4d4d4d", fg="#ffffff", insertbackground="#ffffff")
        self.product_price_entry.pack(fill="x", pady=5)

        tk.Label(add_product_frame, text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:", font=("Arial", 12), bg="#2d2d2d", fg="#ffffff").pack(anchor="w", pady=5)
        self.product_stock_entry = tk.Entry(add_product_frame, font=("Arial", 12), bg="#4d4d4d", fg="#ffffff", insertbackground="#ffffff")
        self.product_stock_entry.pack(fill="x", pady=5)

        tk.Label(add_product_frame, text="–†–µ–π—Ç–∏–Ω–≥:", font=("Arial", 12), bg="#2d2d2d", fg="#ffffff").pack(anchor="w", pady=5)
        self.product_rating_entry = tk.Entry(add_product_frame, font=("Arial", 12), bg="#4d4d4d", fg="#ffffff", insertbackground="#ffffff")
        self.product_rating_entry.pack(fill="x", pady=5)

        tk.Button(add_product_frame, text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", font=("Arial", 12), bg="#4caf50", fg="#ffffff", command=self.add_product).pack(pady=10)
        tk.Button(add_product_frame, text="–ù–∞–∑–∞–¥", font=("Arial", 12), bg="#ff5722", fg="#ffffff", command=self.create_admin_dashboard).pack(pady=5)

    def add_product(self):
        name = self.product_name_entry.get()
        price = self.product_price_entry.get()
        stock = self.product_stock_entry.get()
        rating = self.product_rating_entry.get()

        if not name or not price or not stock or not rating:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")
            return

        try:
            price = int(price)
            stock = int(stock)
            rating = float(rating)
        except ValueError:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¶–µ–Ω–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ä–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
            return

        product_id = len(products_db) + 1
        products_db.append({
            "id": product_id,
            "name": name,
            "price": price,
            "stock": stock,
            "rating": rating
        })
        save_data({"users": users_db, "orders": orders_db, "products": products_db})
        messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        self.create_admin_dashboard()

    def show_products(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        header_frame = tk.Frame(self.root, bg="#1e1e1e", padx=20, pady=10)
        header_frame.pack(fill="x")

        user_label = tk.Label(header_frame, text=f"–ê–¥–º–∏–Ω: {self.current_user}", font=("Arial", 12), bg="#1e1e1e", fg="#ffffff")
        user_label.pack(side="right", padx=10)
        user_label.bind("<Button-1>", lambda event: self.toggle_admin_menu(user_label))

        avatar_label = tk.Label(header_frame, text="üë§", font=("Arial", 14), bg="#1e1e1e", fg="#ffffff")
        avatar_label.pack(side="right")
        avatar_label.bind("<Button-1>", lambda event: self.toggle_admin_menu(user_label))

        cart_button = tk.Label(header_frame, text="üõí", font=("Arial", 14), bg="#4caf50", fg="#ffffff")
        cart_button.pack(side="left", padx=10)
        cart_button.bind("<Button-1>", lambda event: self.toggle_cart(cart_button))  # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è –∞–¥–º–∏–Ω–∞

        self.admin_menu_visible = False
        self.admin_menu_frame = None

        products_frame = tk.Frame(self.root, bg="#2d2d2d", padx=20, pady=20)
        products_frame.pack(fill="both", expand=True)

        canvas = tk.Canvas(products_frame, bg="#2d2d2d", highlightthickness=0)
        scrollbar = tk.Scrollbar(products_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#2d2d2d")

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∫–æ—Ä—å –≤ –≤–µ—Ä—Ö–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª
        canvas.configure(yscrollcommand=scrollbar.set)

        # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        canvas.bind("<Enter>", lambda event: canvas.bind_all("<MouseWheel>", lambda e: canvas.yview_scroll(int(-1 * (e.delta / 120)), "units")))
        canvas.bind("<Leave>", lambda event: canvas.unbind_all("<MouseWheel>"))

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        container = tk.Frame(scrollable_frame, bg="#2d2d2d")
        container.pack(fill="both", expand=True)

        max_columns = 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
        card_width = 200  # –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
        card_height = 350  # –í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞

        row, col = 0, 0
        for product in products_db:
            card_frame = tk.Frame(container, bg="#3d3d3d", width=card_width, height=card_height)
            card_frame.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")

            # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
            card_frame.grid_propagate(False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç–æ—á–∫–∏
            inner_frame = tk.Frame(card_frame, bg="#3d3d3d")
            inner_frame.place(relx=0.5, rely=0.5, anchor="center")

            # –ò–º–∏—Ç–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
            photo_label = tk.Label(inner_frame, bg="#5d5d5d", width=10, height=5)
            photo_label.pack(pady=5)

            tk.Label(inner_frame, text=product["name"], font=("Arial", 14), bg="#3d3d3d", fg="#ffffff").pack(anchor="w")
            tk.Label(inner_frame, text=f"–¶–µ–Ω–∞: {product['price']} ‚ÇΩ", font=("Arial", 12), bg="#3d3d3d", fg="#ffffff").pack(anchor="w")
            tk.Label(inner_frame, text=f"–í –Ω–∞–ª–∏—á–∏–∏: {product['stock']} —à—Ç.", font=("Arial", 12), bg="#3d3d3d", fg="#ffffff").pack(anchor="w")
            tk.Label(inner_frame, text=f"–†–µ–π—Ç–∏–Ω–≥: {product['rating']}", font=("Arial", 12), bg="#3d3d3d", fg="#ffffff").pack(anchor="w")

            add_button = tk.Button(inner_frame, text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", font=("Arial", 12), bg="#4caf50", fg="#ffffff",
                                   command=lambda p=product: self.add_to_cart(p))
            add_button.pack(anchor="w", pady=5)

            col += 1
            if col == max_columns:
                col = 0
                row += 1

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ —Ü–µ–Ω—Ç—Ä—É
        for c in range(col, max_columns):
            tk.Frame(container, width=card_width, height=card_height, bg="#2d2d2d").grid(row=row, column=c)

    def create_product_card(self, parent, product, row, col):
        card_frame = tk.Frame(parent, bg="#3d3d3d", padx=10, pady=10, width=200, height=350)
        card_frame.grid(row=row, column=col, padx=10, pady=10, sticky="nsew")

        # –ò–º–∏—Ç–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä)
        photo_label = tk.Label(card_frame, bg="#5d5d5d", width=20, height=10)
        photo_label.pack(pady=5)

        tk.Label(card_frame, text=product["name"], font=("Arial", 14), bg="#3d3d3d", fg="#ffffff").pack(anchor="w")
        tk.Label(card_frame, text=f"–¶–µ–Ω–∞: {product['price']} ‚ÇΩ", font=("Arial", 12), bg="#3d3d3d", fg="#ffffff").pack(anchor="w")
        tk.Label(card_frame, text=f"–í –Ω–∞–ª–∏—á–∏–∏: {product['stock']} —à—Ç.", font=("Arial", 12), bg="#3d3d3d", fg="#ffffff").pack(anchor="w")
        tk.Label(card_frame, text=f"–†–µ–π—Ç–∏–Ω–≥: {product['rating']}", font=("Arial", 12), bg="#3d3d3d", fg="#ffffff").pack(anchor="w")

        add_button = tk.Button(card_frame, text="–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", font=("Arial", 12), bg="#4caf50", fg="#ffffff",
                               command=lambda p=product: self.add_to_cart(p))
        add_button.pack(anchor="w", pady=5)

    def add_to_cart(self, product):
        if product["stock"] > 0:
            self.cart.append(product)
            product["stock"] -= 1
            save_data({"users": users_db, "orders": orders_db, "products": products_db})
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"{product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
            if hasattr(self, 'cart_menu_visible') and self.cart_menu_visible:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞
                self.toggle_cart(None)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!")

    def create_user_dashboard(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        header_frame = tk.Frame(self.root, bg="#1e1e1e", padx=20, pady=10)
        header_frame.pack(fill="x")

        user_label = tk.Label(header_frame, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user}", font=("Arial", 12), bg="#1e1e1e", fg="#ffffff")
        user_label.pack(side="right", padx=10)
        user_label.bind("<Button-1>", lambda event: self.toggle_user_menu(user_label))

        avatar_label = tk.Label(header_frame, text="üë§", font=("Arial", 14), bg="#1e1e1e", fg="#ffffff")
        avatar_label.pack(side="right")
        avatar_label.bind("<Button-1>", lambda event: self.toggle_user_menu(user_label))

        cart_button = tk.Label(header_frame, text="üõí", font=("Arial", 14), bg="#4caf50", fg="#ffffff")
        cart_button.pack(side="left", padx=10)
        cart_button.bind("<Button-1>", lambda event: self.toggle_cart(cart_button))

        self.user_menu_visible = False
        self.user_menu_frame = None
        self.cart_menu_visible = False
        self.cart_menu_frame = None

        user_frame = tk.Frame(self.root, bg="#2d2d2d", padx=20, pady=20)
        user_frame.pack(fill="both", expand=True)

        tk.Label(user_frame, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ryes!", font=("Arial", 18), bg="#2d2d2d", fg="#ffffff").pack(pady=10)

        canvas = tk.Canvas(user_frame, bg="#2d2d2d", highlightthickness=0)
        scrollbar = tk.Scrollbar(user_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="#2d2d2d")

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
        canvas.bind("<Enter>", lambda event: canvas.bind_all("<MouseWheel>", lambda e: canvas.yview_scroll(int(-1 * (e.delta / 120)), "units")))
        canvas.bind("<Leave>", lambda event: canvas.unbind_all("<MouseWheel>"))

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        row, col = 0, 0
        for product in products_db:
            self.create_product_card(scrollable_frame, product, row, col)
            col += 1
            if col == 5:
                col = 0
                row += 1

    def toggle_user_menu(self, label):
        if self.user_menu_visible:
            self.user_menu_frame.destroy()
            self.user_menu_visible = False
        else:
            x, y = label.winfo_rootx(), label.winfo_rooty() + label.winfo_height()
            self.user_menu_frame = tk.Frame(self.root, bg="#3d3d3d", padx=10, pady=5)
            self.user_menu_frame.place(x=x, y=y, anchor="nw")

            tk.Button(self.user_menu_frame, text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", font=("Arial", 12), bg="#2196f3", fg="#ffffff", command=self.show_user_orders).pack(fill="x", pady=5)
            tk.Button(self.user_menu_frame, text="–í—ã—Ö–æ–¥", font=("Arial", 12), bg="#ff5722", fg="#ffffff", command=self.logout).pack(fill="x", pady=5)
            self.user_menu_visible = True

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ –æ–±–ª–∞—Å—Ç–∏
            self.root.bind("<Button-1>", lambda event: self.close_menu(event, self.user_menu_frame, "user"))

    def toggle_cart(self, label):
        if self.cart_menu_visible:
            self.cart_menu_frame.destroy()
            self.cart_menu_visible = False
        else:
            x, y = label.winfo_rootx(), label.winfo_rooty() + label.winfo_height()
            self.cart_menu_frame = tk.Frame(self.root, bg="#3d3d3d", padx=10, pady=5)
            self.cart_menu_frame.place(x=x, y=y, anchor="nw")

            canvas = tk.Canvas(self.cart_menu_frame, bg="#3d3d3d", highlightthickness=0)
            scrollbar = tk.Scrollbar(self.cart_menu_frame, orient="vertical", command=canvas.yview)
            scrollable_frame = tk.Frame(canvas, bg="#3d3d3d")

            scrollable_frame.bind(
                "<Configure>",
                lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
            )

            canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
            canvas.configure(yscrollcommand=scrollbar.set)

            # –í–∫–ª—é—á–µ–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∫—É—Ä—Å–æ—Ä–∞
            canvas.bind("<Enter>", lambda event: canvas.bind_all("<MouseWheel>", lambda e: canvas.yview_scroll(int(-1 * (e.delta / 120)), "units")))
            canvas.bind("<Leave>", lambda event: canvas.unbind_all("<MouseWheel>"))

            canvas.pack(side="left", fill="both", expand=True)
            scrollbar.pack(side="right", fill="y")

            total_price = 0
            for item in self.cart:
                item_frame = tk.Frame(scrollable_frame, bg="#4d4d4d", padx=10, pady=5)
                item_frame.pack(fill="x", pady=5)

                tk.Label(item_frame, text=item["name"], font=("Arial", 14), bg="#4d4d4d", fg="#ffffff").pack(anchor="w")
                tk.Label(item_frame, text=f"–¶–µ–Ω–∞: {item['price']} ‚ÇΩ", font=("Arial", 12), bg="#4d4d4d", fg="#ffffff").pack(anchor="w")
                total_price += item["price"]

                tk.Button(item_frame, text="–£–¥–∞–ª–∏—Ç—å", font=("Arial", 10), bg="#ff5722", fg="#ffffff", command=lambda i=item: self.remove_from_cart(i)).pack(side="right")

            tk.Label(self.cart_menu_frame, text=f"–û–±—â–∞—è —Å—É–º–º–∞: {total_price} ‚ÇΩ", font=("Arial", 14), bg="#3d3d3d", fg="#ffffff").pack(pady=10)

            tk.Button(self.cart_menu_frame, text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", font=("Arial", 12), bg="#4caf50", fg="#ffffff", command=self.show_checkout_form).pack(pady=10)

            self.cart_menu_visible = True

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ—ë –æ–±–ª–∞—Å—Ç–∏
            self.root.bind("<Button-1>", lambda event: self.close_menu(event, self.cart_menu_frame, "cart"))

    def close_menu(self, event, menu_frame, menu_type):
        if menu_frame and not menu_frame.winfo_containing(event.x_root, event.y_root):
            if menu_type == "user":
                self.user_menu_visible = False
            elif menu_type == "cart":
                self.cart_menu_visible = False
            menu_frame.destroy()

    def remove_from_cart(self, item):
        self.cart.remove(item)
        item["stock"] += 1
        save_data({"users": users_db, "orders": orders_db, "products": products_db})
        if self.cart_menu_visible:
            self.toggle_cart(None)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

    def show_checkout_form(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        header_frame = tk.Frame(self.root, bg="#1e1e1e", padx=20, pady=10)
        header_frame.pack(fill="x")

        user_label = tk.Label(header_frame, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user}", font=("Arial", 12), bg="#1e1e1e", fg="#ffffff")
        user_label.pack(side="right", padx=10)
        user_label.bind("<Button-1>", lambda event: self.toggle_user_menu(user_label))

        avatar_label = tk.Label(header_frame, text="üë§", font=("Arial", 14), bg="#1e1e1e", fg="#ffffff")
        avatar_label.pack(side="right")
        avatar_label.bind("<Button-1>", lambda event: self.toggle_user_menu(user_label))

        self.user_menu_visible = False
        self.user_menu_frame = None

        checkout_frame = tk.Frame(self.root, bg="#2d2d2d", padx=20, pady=20)
        checkout_frame.pack(fill="both", expand=True)

        tk.Label(checkout_frame, text="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", font=("Arial", 18), bg="#2d2d2d", fg="#ffffff").pack(pady=10)

        total_price = sum(item["price"] for item in self.cart)
        tk.Label(checkout_frame, text=f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {total_price} ‚ÇΩ", font=("Arial", 14), bg="#2d2d2d", fg="#ffffff").pack(pady=10)

        tk.Label(checkout_frame, text="–§–ò–û:", font=("Arial", 12), bg="#2d2d2d", fg="#ffffff").pack(anchor="w", pady=5)
        self.full_name_entry = tk.Entry(checkout_frame, font=("Arial", 12), bg="#4d4d4d", fg="#ffffff", insertbackground="#ffffff")
        self.full_name_entry.pack(fill="x", pady=5)

        tk.Label(checkout_frame, text="–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", font=("Arial", 12), bg="#2d2d2d", fg="#ffffff").pack(anchor="w", pady=5)
        self.address_entry = tk.Entry(checkout_frame, font=("Arial", 12), bg="#4d4d4d", fg="#ffffff", insertbackground="#ffffff")
        self.address_entry.pack(fill="x", pady=5)

        tk.Button(checkout_frame, text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", font=("Arial", 12), bg="#4caf50", fg="#ffffff", command=self.complete_order).pack(pady=10)
        tk.Button(checkout_frame, text="–ù–∞–∑–∞–¥", font=("Arial", 12), bg="#ff5722", fg="#ffffff", command=self.create_user_dashboard).pack(pady=5)

    def complete_order(self):
        full_name = self.full_name_entry.get()
        address = self.address_entry.get()

        if not full_name or not address:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return

        order_id = len(orders_db) + 1
        track_number = f"TRACK-{order_id:04d}"
        orders_db.append({
            "id": order_id,
            "items": [item["name"] for item in self.cart],
            "total_price": sum(item["price"] for item in self.cart),
            "address": address,
            "track_number": track_number
        })

        self.cart.clear()
        save_data({"users": users_db, "orders": orders_db, "products": products_db})
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}")
        self.create_user_dashboard()

    def show_user_orders(self):
        for widget in self.root.winfo_children():
            widget.destroy()

        header_frame = tk.Frame(self.root, bg="#1e1e1e", padx=20, pady=10)
        header_frame.pack(fill="x")

        user_label = tk.Label(header_frame, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.current_user}", font=("Arial", 12), bg="#1e1e1e", fg="#ffffff")
        user_label.pack(side="right", padx=10)
        user_label.bind("<Button-1>", lambda event: self.toggle_user_menu(user_label))

        avatar_label = tk.Label(header_frame, text="üë§", font=("Arial", 14), bg="#1e1e1e", fg="#ffffff")
        avatar_label.pack(side="right")
        avatar_label.bind("<Button-1>", lambda event: self.toggle_user_menu(user_label))

        self.user_menu_visible = False
        self.user_menu_frame = None

        user_orders_frame = tk.Frame(self.root, bg="#2d2d2d", padx=20, pady=20)
        user_orders_frame.pack(fill="both", expand=True)

        tk.Label(user_orders_frame, text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", font=("Arial", 18), bg="#2d2d2d", fg="#ffffff").pack(pady=10)

        columns = ("ID", "–¢–æ–≤–∞—Ä", "–°—É–º–º–∞", "–ê–¥—Ä–µ—Å", "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä")
        orders_table = ttk.Treeview(user_orders_frame, columns=columns, show="headings", height=10)
        orders_table.pack(fill="both", expand=True)

        for col in columns:
            orders_table.heading(col, text=col)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_orders = [order for order in orders_db if order.get("user") == self.current_user]
        for order in user_orders:
            orders_table.insert("", "end", values=(order["id"], ", ".join(order["items"]), order["total_price"], order["address"], order["track_number"]))

        tk.Button(user_orders_frame, text="–ù–∞–∑–∞–¥", font=("Arial", 12), bg="#ff5722", fg="#ffffff", command=self.create_user_dashboard).pack(pady=10)

    def complete_order(self):
        full_name = self.full_name_entry.get()
        address = self.address_entry.get()

        if not full_name or not address:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
            return

        order_id = len(orders_db) + 1
        track_number = f"TRACK-{order_id:04d}"
        orders_db.append({
            "id": order_id,
            "user": self.current_user,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            "items": [item["name"] for item in self.cart],
            "total_price": sum(item["price"] for item in self.cart),
            "address": address,
            "track_number": track_number
        })

        self.cart.clear()
        save_data({"users": users_db, "orders": orders_db, "products": products_db})
        messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: {track_number}")
        self.create_user_dashboard()

    def logout(self):
        self.current_user = None
        self.cart.clear()
        self.create_login_screen()


if __name__ == "__main__":
    root = tk.Tk()
    app = RyesApp(root)
    root.mainloop()
